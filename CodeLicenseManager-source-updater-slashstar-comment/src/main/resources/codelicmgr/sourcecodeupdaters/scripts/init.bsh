/*
 * PROJECT
 *     Name
 *         CodeLicenseManager-source-updater-slashstar-comment
 *     
 *     Code Version
 *         2.1
 *     
 *     Description
 *         Manages project and license information in project sourcecode
 *         and provides license text files for inclusion in builds. Supports
 *         multiple languages and it is relatively easy to add a new
 *         language and to make your own custom source code updater.
 *         
 * COPYRIGHTS
 *     Copyright (C) 2013 by Natusoft AB All rights reserved.
 *     
 * LICENSE
 *     Apache 2.0 (Open Source)
 *     
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *     
 *       http://www.apache.org/licenses/LICENSE-2.0
 *     
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *     
 * AUTHORS
 *     Tommy Svensson
 *         Changes:
 *         2009-11-09: Created!
 *
 * ===============================================================================================
 *
 * Put any initializing code and imports needed for the other scripts here. Please note that this
 * script is only run once for all processed files!
 *
 * The following objects are available to this script:
 *
 *   editor - A TextFileEditor instance with the current source code file loaded. You are not allowed to do
 *            load(file) or save() on it! If you feel the need to do that then you are probably doing something
 *            strange and should reconcider whay you are doing :-). All other methods on this object can be called.
 *
 *   projectName             - The name of the project.
 *   hasProjectDescripion    - True if a project description has been provided.
 *   projectDescription      - The projectDescription if 'hasProjectDescription' is true.
 *   hasProjectCodeVersion   - True if a project code version has been provided.
 *   projectCodeVersion      - The version of the project code if 'hasProjectCodeVersion' is true.
 *   hasProjectSubProjectOf  - True if the 'subProjectOf' config has been provided.
 *   projectSubProjectOf     - The name of the parent project the project is a subproject of if 'hasSubProjectOf' is true.
 *   licenseType             - The type of the license. Example: "Apache" or "GPL".
 *   licenseVersion          - The version of the license. Example "2.0" or "v3".
 *   licenseDescription      - A short description of the license, usually just the full name of the license. Provided by license library.
 *   source                  - "Open" or "Closed" depending on license type.
 *   sourceBlock             - The license notice to put at the top of the source file. Sometimes called the license boilerplate.
 *                             Use the formatMultiLineTextToCode(...) function with this.
 *
 * The following functions are available:
 *
 *   display(String str)
 *       str - The string to display. This will only be displayed if verbose is turned on!
 *
 *   formatMultiLineTextToCode(TextBuffer buffer, String text, String lineEnd, final String stringSpec, final String escapedStringSpec, int indent, boolean trim)
 *       buffer            - The buffer to put formatted result in.
 *       text              - The text to format.
 *       lineEnd           - The string that terminates each line. For example " +" or ",".
 *       stringSpec        - A character or set of characters that indicates start and end of a String. For eample "\"" or "'".
 *       escapedStringSpec - A character or set of characters that indicates an escaped start and end of a string. For example "\\\�" or "\\'"
 *       indent            - The number of spaces to indent each line.
 *       trim              - If true each line is also trimmed.
 *
 *   formatMultiLineTextToCode(TextBuffer buffer, String text, String lineBeg, String lineEnd, final String stringSpec, final String escapedStringSpec, int indent, boolean trim)
 *       buffer            - The buffer to put formatted result in.
 *       text              - The text to format.
 *       lineBeg           - The beginning of each line. The indent will be added after this.
 *       lineEnd           - The string that terminates each line. For example " +" or ",".
 *       stringSpec        - A character or set of characters that indicates start and end of a String. For eample "\"" or "'".
 *       escapedStringSpec - A character or set of characters that indicates an escaped start and end of a string. For example "\\\�" or "\\'"
 *       indent            - The number of spaces to indent each line.
 *       trim              - If true each line is also trimmed.
 *
 *   The following functions makes use of the current editor instance, but they receive it automatically, it does not have to be specified!!
 *
 *   moveToEndOfSection(char starting, char ending)
 *       Use this when you can specify the end of a section (project, copyright, license, author) with a starting character that end with a
 *       matching ending character at the same level. For example '(' and ')'.
 *
 *   moveToEndOfSecttion(String startsWith, noSpaceAt)
 *       Use this when each section starts with "comment-char + space + section-heading" and all text in the section are indented with
 *       at least one more space than the heading. This actually finds the next section or end of comment to determine the end of a section.
 *
 *       startsWith - The line indicating a new section must start with this.
 *       noSpaceAt  - The line indicating a new section must not have a space at this position.
 *
 *   findInsertPosition(String endOfSection, String endOfCommentSearch, String commentStart, String commentMiddle, String commentEnd, String searchStrings)
 *       This should be used if a specific section is not already available in the file to find an optimal position to insert the section in.
 *
 *       Please note that this function actually returns a boolean and will be false if none of the specified matches came true. This information is mostly
 *       useful in updateLicenseInfo.bsh which is the first section update script run and might require an editor.insertLineAbove("# "); (or whatever commment
 *       character is relevant) if this returns false.
 *
 *       endOfSection       - This is a string with a call to any function that will move the end of a section. eval() will be done on this string when it is needed.
 *                            Specify one of the above 2 functions or provide your own in init.bsh.
 *       endOfCommentSearch - This is only needed if you specify the "belowComment" attribute in searchStrings (see below). If that attribute is specified and
 *                            this value is not null then 'commentStart' and 'commentEnd' will be used to identify a top of file comment, usually a class
 *                            javadoc comment for java. This value specifies a regular expression that gets passed to a special version of editor.find(...)
 *                            and that will stop the search if the current line matches this regular expression. This is to avoid finding the wrong comment
 *                            if no comment is available at the top of the file (i.e class comment). This used by the java and groovy source updaters
 *                            that uses annotations instead of comments. It is also used when all searchString:s fail to identify a comment to position in
 *                            if available. If that also fails a new comment will be created, but only if all 3 comment sections are non null and non blank.
 *       commentStart       - A string that indicates the beginning of a comment block. If it is a comment type that has no start or end just specify the same
 *                            value for all 3 comment specifications. The "belowComment" attribute of searchStrings will also make us of this, and in this case
 *                            it can be a regular expression since it will never be used to create a comment in that case. In all other cases it cannot be a
 *                            regular expression!
 *       commentMiddle      - A string that indicates the middle of a comment.
 *       commentEnd         - A string that indicates the end of a comment. The "belowComment" attribute of searchStrings will also make us of this, and in this
 *                            case it can be a regular expression (see start comment).
 *       searchStrings      - This specifies a set of comma separated search expressions with semicolon separated attributes used to find a position. The first
 *                            that matches will stop the search and the function will return with the editor at that position, ready for insert.
 *                            It has the following format: attribute=value;...;attribute=value, ... ,attribute=value;...;attribute=value
 *
 *                            The following attributes are available:
 *                            find         - first (default) or last. If first the first match found will be used. If last the last match found will be used.
 *                            insert       - before or after (default). If before the insert position will be before the matched line. If after the insert
 *                                           position will be after the matched line.
 *                            section      - true or false (default). If true the specified match is the start of a section and the endOfSection value will be
 *                                           used if insert==after.
 *                            belowComment - true or false (default). If true then "commentStart","commentEnd", and "endOfCommentSearch" will be used to
 *                                           move the insert position down below a possible comment.
 *                            newLine      - true or false (default). If true a new empty line will be inserted at the insert position leaving an empty line
 *                                           between the match and the new insert position.
 *                            search       - This is a regular expression search string surrounded by ''. Example: '^# LICENSE'. This attribute must always be
 *                                           specified.
 *
 * In addition to this any functions and objects you define in init.bsh will also be available.
 *
 */
import java.util.*;
import java.text.*;


boolean findInsertPosition(searchStrings) {
    String endOfSection = "findEndOfBlock();";
    String endOfCommentSearch = "^[^ ^\\*].*||^ \\*/.*||^[a-zA-Z &#\\*][a-zA-Z &#][a-zA-Z &#].*";
    return findInsertPosition(endOfSection, endOfCommentSearch, "/* ", " * ", " */", searchStrings);
}

/**
 * Support function for finding the end of a specific comment block.
 */
void findEndOfBlock() {
    boolean done = false;
    while (!done) {
        editor.moveDown(1);
        String line = editor.getLine();
        if (line.trim().equals("*/") || (line.startsWith(" * ") && line.length() >= 4 && line.charAt(3) != ' ') || editor.isOnLastLine() || line.matches("^[a-zA-Z &#][a-zA-Z &#][a-zA-Z &#].*")) {
          done = true;          
        }        
    }
    editor.moveUp(1);
    editor.moveToEndOfLine();
}
